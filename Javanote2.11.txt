1、jdk1.8依赖
	1.1（首选）
	
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>
	
	1.2
	
	<profile>  
		<id>jdk18</id>  
		<activation>  
			<activeByDefault>true</activeByDefault>  
			<jdk>1.8</jdk>  
		</activation>  
		<properties>  
			<maven.compiler.source>1.8</maven.compiler.source>  
			<maven.compiler.target>1.8</maven.compiler.target>  
			<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>  
		</properties>   
	</profile>
	
	
	
2、tomcat依赖
	2.1（首选、端口号为8080）
	
	<build>
    <plugins>
      <!-- tomcat 插件 -->
      <plugin>
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <version>2.2</version>
      </plugin>
    </plugins>
  </build>

	2.2（改变端口号和改变路径）
	
	<build>
        <plugins>
            <!--tomcat 插件-->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>

                <configuration>
                    <port>80</port><!--端口号-->
                    <path>/</path><!--路径 变为localhost-->
                </configuration>

            </plugin></plugins>
    </build>
	
	
3、Servlet依赖
	
	3.1（不带注释版）
	
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
	

	3.2 为什么要加provided这个标签？
	
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<!--
				此处为什么需要添加该标签?
				provided指的是在编译和测试过程中有效,最后生成的war包时不会加入
				因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错
			-->
			<scope>provided</scope>
		</dependency>
	
	
	
4、mybatis依赖
	
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis</artifactId>
		<version>3.5.5</version>
	</dependency>



5、mysql驱动
	
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<version>5.1.34</version>
	</dependency>
	
		


6、slf4j日志
	
	<!-- 添加slf4j日志api -->
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-api</artifactId>
		<version>1.7.20</version>
	</dependency>
	<!-- 添加logback-classic依赖 -->
	<dependency>
		<groupId>ch.qos.logback</groupId>
		<artifactId>logback-classic</artifactId>
		<version>1.2.3</version>
	</dependency>
	<!-- 添加logback-core依赖 -->
	<dependency>
		<groupId>ch.qos.logback</groupId>
		<artifactId>logback-core</artifactId>
		<version>1.2.3</version>
	</dependency>
	
	
	
7、整体版（4-6）
   
   <dependencies>

        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.5</version>
        </dependency>
        <!-- mysql 驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.32</version>
        </dependency>
        
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13</version>
            <scope>test</scope>
        </dependency>

        <!-- 添加slf4j日志api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.20</version>
        </dependency>
        <!-- 添加logback-classic依赖 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>
        <!-- 添加logback-core依赖 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>1.2.3</version>
        </dependency>	

    </dependencies>	
	
	
	
8、IOUtils工具类 使用：IOUtils.copy(fis,os);
	//fis:输入流
	//os:输出流
	
		<dependency>
		  <groupId>commons-io</groupId>
		  <artifactId>commons-io</artifactId>
		  <version>2.6</version>
		</dependency>	
		
	
	
9、junit4（@Test）
      
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13</version>
            <scope>test</scope>
        </dependency>
	
	
	
10、JSP依赖

	10.1、JSP依赖
	 
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.2</version>
			<scope>provided</scope>
		</dependency>	
	
	
	10.2、JSTL依赖
	
		10.2.1、在JSP页面上引入JSTL标签库
			<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> 
			
		10.2.2、导入坐标

			<dependency>
				<groupId>jstl</groupId>
				<artifactId>jstl</artifactId>
				<version>1.2</version>
			</dependency>
			<dependency>
				<groupId>taglibs</groupId>
				<artifactId>standard</artifactId>
				<version>1.1.2</version>
			</dependency>
			
		10.2.3、启用EL表达式（isELIgnored="false"）
		
			<%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %>		
			
			
11、web.xml（session自动销毁（会话））	（补充，不是pom依赖）

	  <session-config>
		<session-timeout>100</session-timeout><!--session的失效时间为100分钟（默认为30分钟）-->
	  </session-config>
	  
	  
12、mybatis构建
		
		String resource = "mybatis-config.xml";
		InputStream inputStream = Resources.getResourceAsStream(resource);
		sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);


13、AJAX	
	
	13.1、ajax
		<script>

		// 1、创建核心对象
		var xhttp;
		if (window.XMLHttpRequest) {
			xhttp = new XMLHttpRequest();
		} else {
			// code for IE6, IE5
			xhttp = new ActiveXObject("Microsoft.XMLHTTP");
		}

		// 2、发送请求
		xhttp.open("GET", "http://localhost:8080/ajax-demo/ajaxServlet");
		xhttp.send();

		// 3、获取响应
		xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
				alert(this.responseText) ;
			}
		};

		</script>
		
		
	13.2、axios 使用是比较简单的，分为以下两步：

		引入 axios 的 js 文件
			 <script src="js/axios-0.18.0.js"></script>
				
		使用axios 发送请求，并获取响应结果
			   
			发送 get 请求
				axios({
					method:"get",
					url:"http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan"
				}).then(function (resp){
					alert(resp.data);
				})
				
			发送 post 请求
				axios({
					method:"post",
					url:"http://localhost:8080/ajax-demo1/aJAXDemo1",
					data:"username=zhangsan"
				}).then(function (resp){
					alert(resp.data);
				});


14、JSON

	14.1、导入坐标
	
			<!--fastjson-->
			<dependency>
			   <groupId>com.alibaba</groupId>
			   <artifactId>fastjson</artifactId>
			   <version>1.2.62</version>
		    </dependency>
		   
	14.2、Java对象转JSON
	
		     String jsonStr = JSON.toJSONString(obj);
		    
		     将 Java 对象转换为 JSON 串，只需要使用 Fastjson 提供的 JSON 类中的 toJSONString() 静态方法即可。
	   
	14.3、JSON字符串转Java对象
	
		     User user = JSON.parseObject(jsonStr, User.class);
		    
	         将 json 转换为 Java 对象，只需要使用 Fastjson 提供的 JSON 类中的 parseObject() 静态方法即可。


15、Vue框架
	
	15.1、怎么使用
		15.1.1、在webapp下建立js文件夹，导入vue.js文件
		15.1.2、新建html文件

			// 编写视图		
			<div id="app">
				<!--html代码-->
				<input v-model="username">
				<!--插值表达式-->
				{{username}}

			</div>
			
			// 新建 HTML 页面，引入 Vue.js文件
			<script src="js/vue.js"></script>
			<script>
				// 1、在JS代码区域，创建Vue核心对象，进行数据绑定
				new Vue({
					el:"#app",
					// 简化形式
					data(){
						return {
							username:""
						}
					}


					/*
					原始格式
					data:function () {
						return {
							username:""
						}
					}*/

				});
			</script>
			
		15.1.3、细节：创建 Vue 对象时，需要传递一个 js 对象，而该对象中需要如下属性：

			- el ： 用来指定哪儿些标签受 Vue 管理。 该属性取值 #app 中的 app 需要是受管理的标签的id属性值
			- data ：用来定义数据模型
			- methods ：用来定义函数。这个我们在后面就会用到
			
			


				
				