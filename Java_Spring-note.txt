Part Three of Spring

第一章：初识Spring

1  Spring项目步骤
	① 导入坐标：
		
		<!--spring坐标-->
		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-context</artifactId>
		  <version>5.0.5.RELEASE</version>
		</dependency>
		
	② 创建Bean：
		<bean id="userDao" class="com.landongzoom.dao.impl.UserDaoImpl"></bean>
		
	③ 创建applicationContext.xml，并且进行配置
	
	④ 创建ApplicationContext对象getBean
	
	
2 Spring重点配置标签
	<bean>标签
		id属性:在容器中Bean实例的唯一标识，不允许重复
		class属性:要实例化的Bean的全限定名
		scope属性:Bean的作用范围，常用是Singleton(默认)和prototype
		<property>标签：属性注入，配置Spring容器调用set方法进行注入
			name属性：属性名称
			value属性：注入的普通属性值
			ref属性：注入的对象引用值
			<list>标签
			<map>标签
			<properties>标签
		<constructor-arg>标签:配置Spring容器调用有参构造时进行注入。
			细节：<constructor-arg>的属性、子标签与<property>标签相同。	
	<import>标签:导入其他的Spring的分文件
	
	
3 API
	3.1 ApplicationContext的实现类
		1） ClassPathXmlApplicationContext
		它是从类的根路径下加载配置文件 推荐使用这种
		2） FileSystemXmlApplicationContext
		它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。
		3） AnnotationConfigApplicationContext
		当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。	
	
	3.2 getBean()方法
		// 根据Bean的id从容器中获得Bean实例
		public Object getBean(String name) throws BeansException {
			assertBeanFactoryActive();
			return getBeanFactory().getBean(name);
		}
		
		// 根据类型从容器中匹配Bean实例
		public <T> T getBean(Class<T> requiredType) throws BeansException {
			assertBeanFactoryActive();
			return getBeanFactory().getBean(requiredType);
		}
		
		注意：其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，
		返回是Object，需要强转。当参数的数据类型是Class类型时，表示根据类型从容器中匹
		配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错。
	
	3.3 Spring重点API
		ApplicationContext app = new ClasspathXmlApplicationContext("xml文件");
		app.getBean("id");
		app.getBean(Class);
		

		
第二章
		
1 数据源
	1.1	数据源的开发步骤
		① 导入数据源的坐标和数据库驱动坐标
		
			<!--C3P0连接池-->
			<dependency>
			  <groupId>c3p0</groupId>
			  <artifactId>c3p0</artifactId>
			  <version>0.9.1.2</version>
			</dependency>
			
			<!--mysql数据库-->
			<dependency>
			  <groupId>mysql</groupId>
			  <artifactId>mysql-connector-java</artifactId>
			  <version>5.1.32</version>
			</dependency>
			
			<!-- Druid连接池 -->
			<dependency>
			  <groupId>com.alibaba</groupId>
			  <artifactId>druid</artifactId>
			  <version>1.1.10</version>
			</dependency>
			
		② 创建数据源对象
		③ 设置数据源的基本连接数据
		④ 使用数据源获取连接资源和归还连接资源
		
2 注解开发
	2.1 原始注解			
		================================================================
		@Component 		使用在类上用于实例化Bean
		----------------------------------------------------------------
		@Controller 	使用在web层类上用于实例化Bean
		@Service 		使用在service层类上用于实例化Bean
		@Repository 	使用在dao层类上用于实例化Bean
		----------------------------------------------------------------
		@Autowired		使用在字段上用于根据类型依赖注入
		@Qualifier 		结合@Autowired一起使用用于根据名称进行依赖注入
		@Resource 		相当于@Autowired+@Qualifier，按照名称进行注入
		----------------------------------------------------------------
		@Value	 		注入普通属性
		@Scope 			标注Bean的作用范围
		================================================================
		（非重点）
		@PostConstruct 	使用在方法上标注该方法是Bean的初始化方法
		@PreDestroy 	使用在方法上标注该方法是Bean的销毁方法	
		================================================================
	
	2.2 新注解
		==================================================================================
	    @Configuration 	用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解
		----------------------------------------------------------------------------------
		@ComponentScan	用于指定 Spring 在初始化容器时要扫描的包。
						 作用和在 Spring 的 xml 配置文件中的
						<context:component-scan base-package="com.itheima"/>一样
		----------------------------------------------------------------------------------	
		@Bean 			使用在方法上，标注将该方法的返回值存储到 Spring 容器中
		----------------------------------------------------------------------------------
		@PropertySource 用于加载.properties 文件中的配置
		----------------------------------------------------------------------------------
		@Import 		用于导入其他配置类
		==================================================================================
	
	2.3 Spring集成Junit
		<!--此处需要注意的是， spring5 及以上版本要求 junit 的版本必须是 4.12 及以上-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>5.0.5.RELEASE</version>
		</dependency>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		
		步骤：
		① 导入spring集成Junit的坐标
		② 使用@Runwith注解替换原来的运行期
		③ 使用@ContextConfiguration指定配置文件或配置类
		④ 使用@Autowired注入需要测试的对象
		⑤ 创建测试方法进行测试
		
		
		
第三章 SpringMVC快速入门

一 Spring集成web环境
1 servlet jsp坐标
	<dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.0.1</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>javax.servlet.jsp-api</artifactId>
      <version>2.2.1</version>
      <scope>provided</scope>
    </dependency>
	
2 Spring提供获取应用上下文的工具
	① 在web.xml中配置ContextLoaderListener监听器（导入spring-web坐标）
	
		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-web</artifactId>
		  <version>5.0.5.RELEASE</version>
		</dependency>
		
		<!--全局参数-->
		<context-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:applicationContext.xml</param-value>
		</context-param>
		<!--Spring的监听器-->
		<listener>
			<listener-class>
				org.springframework.web.context.ContextLoaderListener
			</listener-class>
		</listener>
		
	② 使用WebApplicationContextUtils获得应用上下文对象ApplicationContext
		ApplicationContext applicationContext =
		WebApplicationContextUtils.getWebApplicationContext(servletContext);
		Object obj = applicationContext.getBean("id");
		
4 SpringMVC
	4.1 坐标
	① 导入Servlet和Jsp的坐标
		<!--Spring坐标-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.0.5.RELEASE</version>
		</dependency>
		<!--SpringMVC坐标-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>5.0.5.RELEASE</version>
		</dependency>
		
		<!--Servlet坐标-->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<!--Jsp坐标-->
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.0</version>
			<scope>provided</scope>
		</dependency>
		
	② 在web.xml配置SpringMVC的核心控制器
		<servlet>
			<servlet-name>DispatcherServlet</servlet-name>
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>classpath:spring-mvc.xml</param-value>
			</init-param>
			<load-on-startup>1</load-on-startup>
		</servlet>
		<servlet-mapping>
			<servlet-name>DispatcherServlet</servlet-name>
			<url-pattern>/</url-pattern>
		</servlet-mapping>
		
	4.2 SpringMVC的相关组件
		• 前端控制器： DispatcherServlet
		• 处理器映射器： HandlerMapping
		• 处理器适配器： HandlerAdapter
		• 处理器： Handler
		• 视图解析器： View Resolver
		• 视图： View	
		
	4.3 SpringMVC的注解和配置
		• 请求映射注解： @RequestMapping
		• 视图解析器配置：
			REDIRECT_URL_PREFIX = "redirect:"
			FORWARD_URL_PREFIX = "forward:"
			prefix = "";
			suffix = "";	
			
			
			
第四章 SpringMVC的请求和响应
	1. json 坐标
	<dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>2.9.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.9.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>2.9.0</version>
    </dependency>